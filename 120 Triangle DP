// LeetCode Dp Problem 120
//Given a triangle array, return the minimum path sum from top to bottom.

//For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

//Example 1:

//Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
//Output: 11
//Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
// The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).

// We follow bottom up approach to solve the problem.

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        for(int row = triangle.size()-2; row>=0;row--)
        {
            for(int col =0; col<triangle.get(row).size();col++)
            {
                // find the minimum path sum by adding the smallest of two
                int minPathSum = Math.min(triangle.get(row+1).get(col),triangle.get(row+1).get(col+1));
                triangle.get(row).set(col,triangle.get(row).get(col)+minPathSum);
            }
        }
        return triangle.get(0).get(0);
    }
}
